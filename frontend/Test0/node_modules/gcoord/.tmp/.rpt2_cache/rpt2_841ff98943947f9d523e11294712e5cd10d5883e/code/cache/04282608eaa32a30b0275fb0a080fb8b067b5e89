{"code":"import { error, isNumber, isArray, coordEach, } from './helper';\r\nimport * as CRS from './crs/index';\r\n/**\r\n * transform\r\n *\r\n * @param {geojson|position|string} input\r\n * @returns {geojson|position} output\r\n */\r\n/* eslint-disable no-param-reassign */\r\nexport default function transform(input, crsFrom, crsTo) {\r\n    /**\r\n     * TODO:\r\n     * if (condition) error(msg); -> assert(condition, msg);\r\n     * the limitation of TS. https://github.com/Microsoft/TypeScript/issues/8655\r\n     */\r\n    if (!input)\r\n        error('coordinate is required');\r\n    if (!crsFrom)\r\n        error('original coordinate system is required');\r\n    if (!crsTo)\r\n        error('target coordinate system is required');\r\n    var from = CRS[crsFrom];\r\n    if (!from)\r\n        error('original coordinate system is invalid');\r\n    if (crsFrom === crsTo)\r\n        return input;\r\n    var to = from.to[crsTo];\r\n    if (!to)\r\n        error('target coordinate system is invalid');\r\n    var type = typeof (input);\r\n    if (type !== 'string' && type !== 'object')\r\n        error('coordinate must be an geojson or an array of position');\r\n    if (type === 'string') {\r\n        try {\r\n            input = JSON.parse(input);\r\n        }\r\n        catch (e) {\r\n            error('input is not a legal JSON string');\r\n        }\r\n    }\r\n    var isPosition = false;\r\n    if (isArray(input)) {\r\n        if (input.length < 2)\r\n            error('position must be at 2 numbers long');\r\n        if (!isNumber(input[0]) || !isNumber(input[1]))\r\n            error('position must contain numbers');\r\n        input = input.map(Number);\r\n        isPosition = true;\r\n    }\r\n    var output = null;\r\n    var convert = to;\r\n    if (isPosition) {\r\n        output = convert(input);\r\n    }\r\n    else {\r\n        coordEach(input, function (coord) {\r\n            var _a;\r\n            _a = convert(coord), coord[0] = _a[0], coord[1] = _a[1];\r\n        });\r\n        output = input;\r\n    }\r\n    return output;\r\n}\r\n","dts":{"name":"D:/work/gcoord/dist/types/transform.d.ts","writeByteOrderMark":false,"text":"import { Position, GeoJSON } from './geojson';\r\n/**\r\n * transform\r\n *\r\n * @param {geojson|position|string} input\r\n * @returns {geojson|position} output\r\n */\r\nexport default function transform(input: any, crsFrom: string, crsTo: string): GeoJSON | Position | string;\r\n"}}
